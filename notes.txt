To enable a user to create /etc/sysctl.d/conjur.conf, you need to grant them appropriate permissions or elevate their privileges using sudo. Here's how you can do it:

Using sudo:
Edit sudoers file:

Run sudo visudo to edit the sudoers file. This ensures proper syntax checking.

Grant permissions:
gclim ALL=(ALL) NOPASSWD: /usr/bin/cp ./etc/sysctl.d/conjur.conf /etc/sysctl.d/conjur.conf
gclim ALL=(ALL) NOPASSWD: /usr/sbin/sysctl -p /etc/sysctl.d/conjur.conf


-----
mkdir -p $HOME/.config/systemd/user
podman generate systemd myapp --name --container-prefix="" --separator="" > $HOME/.config/systemd/user/conjur.service
systemctl --user enable conjur.service


[gclim@conjur01 conjur-appliance]$ podman generate systemd myapp --name --container-prefix="" --separator="" > $HOME/.config/systemd/user/conjur.service

DEPRECATED command:
It is recommended to use Quadlets for running containers and pods under systemd.

Please refer to podman-systemd.unit(5) for details.

-----
cd $HOME/.config/systemd/user/
nano conjur.service
[Unit]
Description=MyApp container

[Service]
Restart=always
ExecStartPre=-/usr/bin/podman stop -t 5 myapp
ExecStartPre=-/usr/bin/podman rm myapp
ExecStart=/usr/bin/podman run -p 8082:80 --name myapp dockerhub.gcloud101.com/my-sample-app
[Install]
WantedBy=default.target

Reload systemd:
systemctl --user daemon-reload

Start and enable your service:
systemctl --user start conjur.service
systemctl --user enable conjur.service

run -p 8082:80 --name myapp dockerhub.gcloud101.com/my-sample-app


-----
To remove:

systemctl --user stop conjur.service
systemctl --user disable conjur.service
rm $HOME/.config/systemd/user/conjur.service
systemctl --user daemon-reload

------

ssh-keygen -t ed25519 -C "your_email@example.com"

----

scp -i ~/.ssh/conjurappliance_ed25519 -r ~/cyberark/dap/ gclim@conjur01.gcloud101.com:~/cyberark/dap/

----

# to ensure the folder exists in the container   
podman exec leadernode mkdir -p /opt/cyberark/dap/certificates
podman cp ~/cyberark/dap/certificates/conjur-dev-leader-ca-chain.pem leadernode:/opt/cyberark/dap/certificates/conjur-dev-leader-ca-chain.pem
podman cp ~/cyberark/dap/certificates/conjur-dev-leader-master-key.pem leadernode:/opt/cyberark/dap/certificates/conjur-dev-leader-master-key.pem
podman cp ~/cyberark/dap/certificates/conjur-dev-leader-master-cert.pem leadernode:/opt/cyberark/dap/certificates/conjur-dev-leader-master-cert.pem
podman cp ~/cyberark/dap/certificates/conjur-dev-follower-key.pem leadernode:/opt/cyberark/dap/certificates/conjur-dev-follower-key.pem
podman cp ~/cyberark/dap/certificates/conjur-dev-follower-cert.pem leadernode:/opt/cyberark/dap/certificates/conjur-dev-follower-cert.pem

# import root CA certificate
podman exec leadernode evoke ca import --no-restart --root /opt/cyberark/dap/certificates/conjur-dev-leader-ca-chain.pem

# import HA leader cluster certificate
podman exec leadernode evoke ca import \
    --no-restart \
    --key /opt/cyberark/dap/certificates/conjur-dev-leader-master-key.pem \
    --set /opt/cyberark/dap/certificates/conjur-dev-leader-master-cert.pem

# import Follower load balancer certificate
docker exec leadernode evoke ca import \
    --no-restart \
    --key /opt/cyberark/dap/certificates/conjur-dev-leader-follower-key.pem \
    /opt/cyberark/dap/certificates/conjur-dev-leader-follower-cert.pem

# resert conjur services
podman exec leadernode sv restart conjur nginx pg seed

